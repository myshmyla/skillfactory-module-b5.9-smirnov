import time

class Timing:
    
    #передаем в конструктор класса количество запусков
    def __init__(self, num_runs = 5):
        
    #запоминаем количество запусков
        self.num_runs = num_runs
    def __call__(self, func):
    
    #декоратор принимает, как аргумент, функцию, которую он оборачивает
    #теперь создаем функцию-обертку
        def wrap():
            start = time.time()
            func()
            print('[*] Начало функции-обертки')
            
    #сначало вызываем функцию
    #далее - выполняем вызов
            for i in range(self.num_runs):
                func()
            print('[*] Конец функции обертки')
            
    #теперь возвращаем функцию-обертку
    #эта функция заменит собой ту функцию, которую мы передали return wrap
            end = time.time()
    
    #вывод времени выполнения
            print('[*] Время выполнения: {} sec.'.format((end-start/self.num_runs)))
        return wrap
    
    #создаем объект класса
    #этот декоратор будет выполнять функцию 5 раз
tim_5 = Timing()

    #используем декоратор
@tim_5
def f():
    print('Основная функция')

    #теперь вызываем функцию
f()